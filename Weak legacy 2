local Translations = {
    -- 主导航栏
    ["Welcome"] = "欢迎",
    ["Farming"] = "刷怪",
    ["Teleport"] = "传送",
    ["Local Player"] = "本地玩家",
    ["Dungeons"] = "地下城",
    ["Settings"] = "设置",
    ["About"] = "关于",
    -- Farming（刷怪）模块
    ["Options"] = "选项",
    ["Farming Distance"] = "刷怪距离",
    ["Farming Type"] = "刷怪类型",
    ["Method 2"] = "方法2",
    ["Mobs"] = "普通怪物",
    ["Select Mob"] = "选择怪物",
    ["Mob Farm"] = "自动刷怪",
    ["This Will Farm Mobs Automatically"] = "这将自动刷杀怪物",
    ["Boss"] = "首领",
    ["Select Boss"] = "选择首领",
    ["Boss Farm"] = "自动刷首领",
    ["This Will Farm Bosses Automatically"] = "这将自动刷杀首领",
    ["Event Boss"] = "事件首领",
    ["Select Event Boss"] = "选择事件首领",
    ["Event Boss Farm"] = "自动刷事件首领",
    ["This Will Farm Event Bosses Automatically"] = "这将自动刷杀事件首领",
    -- 杂项功能
    ["Misc"] = "杂项",
    ["Select Weapon"] = "选择武器",
    ["If not working just equip combat or any katana from inventory"] = "如果无效，请从背包装备战斗或任意武士刀",
    ["Sword/Combat"] = "剑/战斗",
    ["Auto Equip Weapon"] = "自动装备武器",
    ["Turn This Off If You Don't Want To Auto Equip Weapon"] = "如不想自动装备武器请关闭此功能",
    ["Instant Kill"] = "秒杀",
    ["Mobs will instantly die after taking 10% damage."] = "怪物受到10%伤害后立即死亡。",
    ["Auto Breath"] = "自动呼吸",
    ["Automatically breathes"] = "自动进行呼吸",
    ["Auto Buff"] = "自动增益",
    ["Automatically buffs"] = "自动施放增益效果",
    ["Auto Skills"] = "自动技能",
    ["Automatically uses skills"] = "自动使用技能",
    -- Dungeons（地下城）模块
    ["Teleport to Dungeon"] = "传送到地下城",
    ["Teleports you to the dungeon entrance"] = "将你传送到地下城入口",
    ["Auto Dungeon Farm"] = "自动刷地下城",
    ["Only works inside the dungeon"] = "仅在地下城内生效",
    -- Settings（设置）模块
    ["Reset Timer"] = "重置计时器",
    ["Time in seconds to reset the character"] = "重置角色的时间（秒）",
    ["Auto Reset"] = "自动重置",
    ["Automatically resets the character in selected time"] = "在选定时间自动重置角色",
    -- About（关于）模块
    ["Info"] = "信息",
    ["This script is made by L4BIB. Join the Discord server for support and updates."] = "本脚本由L4BIB制作。加入Discord服务器获取支持与更新。",
    ["Version"] = "版本",
    ["Last Updated"] = "最后更新",
    ["Credits"] = "致谢",
    ["Script Developer"] = "脚本开发者",
    -- 特定首领/怪物名称
    ["Kokushibo"] = "黑死牟",
    ["Hair Dream Manipulation User"] = "发梦操纵者",
    ["Weak Demon"] = "弱小鬼",
    ["Lower Moon Demon 6"] = "下弦之陆",
    ["Lower Moon Demon 5"] = "下弦之伍",
    ["Lower Moon Demon 4"] = "下弦之肆",
    ["Demon"] = "鬼",
    ["Speed Art User"] = "速之艺术使用者",
    ["Dream Manipulation User"] = "梦境操纵者",
    ["Mutated Demon"] = "变异鬼",
    ["Winter Demon"] = "冬鬼",
    ["Strong Demon"] = "强大鬼",
    ["Half Speed Art User"] = "半速艺术使用者",
    ["Missum"] = "蜜璃",
    ["Kanao"] = "香奈乎",
    ["Zentisu"] = "善逸",
    ["Cputaro"] = "碳太郎",
    ["Tanjiro (Water)"] = "炭治郎 (水)",
    ["Tanjiro (Sun)"] = "炭治郎 (日)",
    ["Obama"] = "奥巴马",
    ["Susamaru"] = "球鬼",
    ["Douma"] = "童磨",
    ["Yorilchi (Half Form)"] = "缘一 (半形态)",
    ["Tengen"] = "天元",
    -- 补充界面中出现的文本
    ["Main Village"] = "主村庄",
    ["Final Selection"] = "最终选拔",
    ["Little Village"] = "小村庄",
    ["Demon Slayer Corp"] = "鬼杀队",
    ["Danger Zone"] = "危险区域",
    ["Winter Village"] = "冬之村",
    ["Yoriichi (Half Form)"] = "缘一 (半形态)",
    ["Gyutaro"] = "妓夫太郎",
    ["Obanai"] = "伊黑小芭内",
    ["Kanroji Mitsuri"] = "甘露寺蜜璃",
    ["Kochou Shinobu"] = "胡蝶忍",
    ["Tomiyoka Giyuu"] = "冨冈义勇",
    ["Tokito Muichiro"] = "时透无一郎",
    ["Akaza"] = "猗窝座",
    ["Hantengu"] = "半天狗",
    ["Daki"] = "堕姬",
    ["Awakened Kaigaku"] = "觉醒的狯岳",
    ["Sanemi"] = "不死川实弥",
    ["Rui"] = "累",
    ["Kaigaku"] = "狯岳",
    ["Yahaba"] = "矢琶羽",
    ["Nezuko"] = "祢豆子",
    ["Rengoku"] = "炼狱杏寿郎",
    ["Mitsuri"] = "蜜璃",
    ["Zenitsu"] = "善逸",
    ["Gyutaro"] = "妓夫太郎",
    ["Obanai"] = "伊黑小芭内",
    ["Susamaru"] = "手球鬼",
    ["Douma"] = "童磨",
    ["Tengen"] = "宇髄天元",
    ["Auto Dungeon Farm"] = "自动地下城刷怪",
    ["Reset Timmer"] = "重置计时器",
    ["L4BIB HUB"] = "L4BIB  hub",
    ["UPD 4.75"] = "版本4.75",
    ["Weak Legacy 2"] = "Weak Legacy 2"
}

local debugMode = false
local performanceMode = true

-- ========== 预编译匹配表 ==========
local TranslationCache = {}
local NormalizedTranslations = {}

for en, cn in pairs(Translations) do
    local normalized = en:lower():gsub("%s+", " "):gsub("^%s*(.-)%s*$", "%1")
    NormalizedTranslations[normalized] = cn
end

-- ========== 翻译锁定系统 ==========
local TranslationLocks = {} -- 存储已锁定的翻译元素
local LockedTexts = {} -- 存储已锁定的文本内容

-- ========== 优化翻译函数 ==========
local function translateText(text)
    if not text or type(text) ~= "string" or text == "" then 
        return text 
    end
    
    if TranslationCache[text] then
        return TranslationCache[text]
    end
    
    if Translations[text] then
        TranslationCache[text] = Translations[text]
        return Translations[text]
    end
    
    local cleanedText = text:gsub("%s+", " "):gsub("^%s*(.-)%s*$", "%1")
    if Translations[cleanedText] then
        TranslationCache[text] = Translations[cleanedText]
        return Translations[cleanedText]
    end
    
    local normalizedText = cleanedText:lower()
    if NormalizedTranslations[normalizedText] then
        TranslationCache[text] = NormalizedTranslations[normalizedText]
        return NormalizedTranslations[normalizedText]
    end
    
    TranslationCache[text] = text
    return text
end

-- ========== 调试功能 ==========
local function debugLog(message)
    if debugMode then
        print("[翻译调试] " .. message)
    end
end

-- ========== 锁定翻译系统 ==========
local function lockTranslation(gui, originalText, translatedText)
    if not gui or not originalText then return end
    
    -- 标记为已锁定
    TranslationLocks[gui] = {
        original = originalText,
        translated = translatedText,
        lockedAt = tick()
    }
    LockedTexts[originalText] = true
    
    debugLog("锁定翻译: '" .. originalText .. "' -> '" .. translatedText .. "'")
end

local function isTranslationLocked(gui)
    if not TranslationLocks[gui] then return false end
    
    -- 检查GUI是否仍然存在
    if not pcall(function() return gui.Parent ~= nil end) then
        TranslationLocks[gui] = nil
        return false
    end
    
    return true
end

-- ========== UI状态管理 ==========
local UIState = {
    isActive = true,
    currentGuis = {},
    listeners = {}
}

local function cleanupUIState()
    for _, connection in pairs(UIState.listeners) do
        if connection then
            pcall(function() connection:Disconnect() end)
        end
    end
    UIState.listeners = {}
    UIState.currentGuis = {}
end

local function refreshUIState()
    cleanupUIState()
    UIState.isActive = true
    setupTranslationEngine()
end

-- ========== 优化GUI扫描引擎 ==========
local function setupTranslationEngine()
    local function safeTranslateElement(gui)
        if not gui:IsA("TextLabel") and not gui:IsA("TextButton") and not gui:IsA("TextBox") then 
            return 
        end
        
        -- 检查GUI是否可见和启用
        local parent = gui
        while parent do
            if parent:IsA("GuiObject") and not parent.Visible then
                return
            end
            if parent:IsA("ScreenGui") and not parent.Enabled then
                return
            end
            parent = parent.Parent
        end
        
        -- 检查是否已经锁定翻译
        if isTranslationLocked(gui) then
            local lockData = TranslationLocks[gui]
            -- 确保文本保持锁定状态
            if gui.Text ~= lockData.translated then
                pcall(function()
                    gui.Text = lockData.translated
                end)
            end
            return
        end
        
        local text = gui.Text
        if text and text ~= "" then
            local translated = translateText(text)
            if translated ~= text then
                pcall(function()
                    gui.Text = translated
                    -- 翻译成功后立即锁定
                    lockTranslation(gui, text, translated)
                end)
            else
                -- 即使没有翻译，也锁定原文本避免重复检查
                lockTranslation(gui, text, text)
            end
        end
    end

    local function optimizedScanGui(parent)
        if not UIState.isActive then return end
        
        if performanceMode then
            local descendants = parent:GetDescendants()
            local batchSize = 8
            
            for i = 1, #descendants, batchSize do
                if not UIState.isActive then break end
                
                for j = i, math.min(i + batchSize - 1, #descendants) do
                    pcall(safeTranslateElement, descendants[j])
                end
                task.wait(0.02) -- 进一步减少延迟
            end
        else
            for _, descendant in ipairs(parent:GetDescendants()) do
                if not UIState.isActive then break end
                pcall(safeTranslateElement, descendant)
            end
        end
    end

    local function setupOptimizedDescendantListener(parent)
        if not UIState.isActive then return end
        
        local connection
        connection = parent.DescendantAdded:Connect(function(descendant)
            if not UIState.isActive then 
                pcall(function() connection:Disconnect() end)
                return 
            end
            
            task.wait(0.2) -- 等待元素初始化
            pcall(safeTranslateElement, descendant)
        end)
        
        table.insert(UIState.listeners, connection)
    end

    -- 初始化扫描
    local function initializeScan()
        local guisToScan = {game:GetService("CoreGui")}
        local player = game:GetService("Players").LocalPlayer
        if player and player:FindFirstChild("PlayerGui") then
            table.insert(guisToScan, player.PlayerGui)
        end

        UIState.currentGuis = guisToScan

        -- 初始扫描
        for _, gui in ipairs(guisToScan) do
            if not UIState.isActive then break end
            pcall(setupOptimizedDescendantListener, gui)
            pcall(optimizedScanGui, gui)
        end

        -- 极简化的定期扫描 - 只扫描新元素
        while UIState.isActive do
            task.wait(performanceMode and 30 or 15) -- 大幅延长扫描间隔
            
            -- 清理无效的锁定
            for gui, lockData in pairs(TranslationLocks) do
                if not pcall(function() return gui.Parent ~= nil end) then
                    TranslationLocks[gui] = nil
                end
            end
            
            -- 只对新GUI进行扫描，已锁定的元素不再扫描
            for _, gui in ipairs(guisToScan) do
                if not UIState.isActive then break end
                pcall(optimizedScanGui, gui)
            end
        end
    end
    
    -- 启动初始化扫描
    task.spawn(initializeScan)
end

-- ========== 窗口状态检测 ==========
local function setupWindowStateDetection()
    local coreGui = game:GetService("CoreGui")
    local player = game:GetService("Players").LocalPlayer
    if not player then return end
    
    local playerGui = player:WaitForChild("PlayerGui")
    
    local function onGuiVisibilityChanged(gui)
        if not UIState.isActive then return end
        
        if gui.Enabled == false then
            debugLog("检测到UI被隐藏，暂停翻译引擎")
            cleanupUIState()
        else
            task.wait(0.5)
            if not UIState.isActive then
                debugLog("UI重新显示，重新初始化翻译引擎")
                refreshUIState()
            end
        end
    end
    
    -- 监听主要GUI的Enabled变化
    pcall(function()
        UIState.listeners["CoreGuiEnabled"] = coreGui:GetPropertyChangedSignal("Enabled"):Connect(function()
            onGuiVisibilityChanged(coreGui)
        end)
    end)
    
    pcall(function()
        UIState.listeners["PlayerGuiEnabled"] = playerGui:GetPropertyChangedSignal("Enabled"):Connect(function()
            onGuiVisibilityChanged(playerGui)
        end)
    end)
    
    -- 监听新添加的ScreenGui
    UIState.listeners["PlayerGuiChildAdded"] = playerGui.ChildAdded:Connect(function(child)
        if child:IsA("ScreenGui") then
            task.wait(0.1)
            pcall(function()
                UIState.listeners[child.Name] = child:GetPropertyChangedSignal("Enabled"):Connect(function()
                    onGuiVisibilityChanged(child)
                end)
            end)
        end
    end)
end

-- ========== 内存管理优化 ==========
local function cleanupMemory()
    if performanceMode then
        for text, translation in pairs(TranslationCache) do
            if type(text) == "string" and #text > 100 then
                TranslationCache[text] = nil
            end
        end
        
        -- 清理过期的锁定（超过1小时）
        local currentTime = tick()
        for gui, lockData in pairs(TranslationLocks) do
            if currentTime - lockData.lockedAt > 3600 then -- 1小时
                TranslationLocks[gui] = nil
            end
        end
        
        collectgarbage("step")
    end
end

-- ========== 游戏加载等待函数 ==========
local function waitForGameLoad()
    local players = game:GetService("Players")
    while not players.LocalPlayer do
        task.wait(1)
    end
    task.wait(5)
end

-- ========== 定期内存清理 ==========
task.spawn(function()
    while true do
        task.wait(60) -- 每60秒清理一次
        pcall(cleanupMemory)
    end
end)

-- ========== 主启动函数 ==========
task.spawn(function()
    waitForGameLoad()
    debugLog("启动锁定式翻译引擎")
    setupWindowStateDetection()
    setupTranslationEngine()
end)

-- ========== 外部脚本加载 ==========
task.spawn(function()
    task.wait(10)
    local success, err = pcall(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/L4BIBKAZI/L4BIB-HUB/refs/heads/main/Weak%20Legacy%202"))()
    end)

    if not success then
        warn("外部脚本加载失败:", err)
    end
end)

-- ========== 管理函数 ==========
local function refreshTranslation()
    debugLog("手动刷新翻译引擎")
    refreshUIState()
end

local function unlockAllTranslations()
    debugLog("解锁所有翻译")
    TranslationLocks = {}
    LockedTexts = {}
    refreshUIState()
end

local function getLockedCount()
    local count = 0
    for _ in pairs(TranslationLocks) do
        count = count + 1
    end
    return count
end

-- 暴露给外部调用的函数
getgenv().RefreshTranslation = refreshTranslation
getgenv().UnlockAllTranslations = unlockAllTranslations
getgenv().GetLockedTranslationCount = getLockedCount

debugLog("锁定式翻译引擎初始化完成 - 已翻译文本将被固定")
