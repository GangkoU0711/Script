local Translations = {
    -- 主菜单和导航
    -- 主导航栏和主菜单
    ["Welcome"] = "欢迎",
    ["Main"] = "主界面",
    ["Farming"] = "刷怪",
    ["Misc"] = "杂项",
    ["Teleport"] = "传送",
    ["Local Player"] = "本地玩家",
    ["Dungeons"] = "地下城",
    ["Settings"] = "设置",
    ["About"] = "关于",
    ["Options"] = "选项",

    -- Farming（刷怪）模块
    ["Farming Distance"] = "刷怪距离",
    ["Farming Type"] = "刷怪类型",
    ["Method 2"] = "方法2",
    ["Mobs"] = "普通怪物",
    ["Select Mob"] = "选择怪物",
    ["Mob Farm"] = "自动刷怪",
    ["This Will Farm Mobs Automatically"] = "这将自动刷杀怪物",
    ["Boss"] = "首领",
    ["Select Boss"] = "选择首领",
    ["Boss Farm"] = "自动刷首领",
    ["This Will Farm Bosses Automatically"] = "这将自动刷杀首领",
    ["Event Boss"] = "事件首领",
    ["Select Event Boss"] = "选择事件首领",
    ["Event Boss Farm"] = "自动刷事件首领",
    ["This Will Farm Event Bosses Automatically"] = "这将自动刷杀事件首领",

    -- 设置和偏移选项
    ["Offset Position"] = "位置偏移",
    ["Adjust the position offset for Auto Farming"] = "调整自动刷怪的位置偏移量",
    ["Offset Distance"] = "距离偏移",
    ["Adjust the Distance Offset for Auto Farming"] = "调整自动刷怪的距离偏移量",
    ["Auto Take Quest"] = "自动接任务",
    ["Take Quest To The Farming Mob Automatically"] = "自动接取刷怪目标的任务",
    ["Above Mob"] = "怪物上方",

    -- 杂项功能
    ["Select Weapon"] = "选择武器",
    ["If not working just equip combat or any katana from inventory"] = "如果无效，请从背包装备战斗或任意武士刀",
    ["Sword/Combat"] = "剑/战斗",
    ["Auto Equip Weapon"] = "自动装备武器",
    ["Turn This Off If You Don't Want To Auto Equip Weapon"] = "如不想自动装备武器请关闭此功能",
    ["Instant Kill"] = "秒杀",
    ["InstantKill"] = "秒杀",
    ["Mobs will instantly die after taking 10% damage"] = "怪物受到10%伤害后立即死亡",
    ["Mobs will instantly die after taking 10% damage."] = "怪物受到10%伤害后立即死亡。",
    ["InstantKill Doesn't Work Inside Dungeons"] = "秒杀在地下城内无效",
    ["Using Instant Kill May Cause Issues While Farming Dungeons"] = "使用秒杀可能导致刷地下城时出现问题",
    ["Auto Breath"] = "自动呼吸",
    ["Automatically breathes"] = "自动进行呼吸",
    ["Auto Buff"] = "自动增益",
    ["Automatically buffs"] = "自动施放增益效果",
    ["Auto Skills"] = "自动技能",
    ["Automatically uses skills"] = "自动使用技能",
    ["Server Hop"] = "切换服务器",
    ["Other"] = "其他",

    -- Dungeons（地下城）模块
    ["Teleport to Dungeon"] = "传送到地下城",
    ["Teleports you to the dungeon entrance"] = "将你传送到地下城入口",
    ["Auto Dungeon Farm"] = "自动刷地下城",
    ["Only works inside the dungeon"] = "仅在地下城内生效",
    ["Auto Any Dungeon Farm"] = "自动刷任意地下城",
    ["Work Inside Any Dungeons"] = "在任意地下城内生效",

    -- Settings（设置）模块
    ["Reset Timer"] = "重置计时器",
    ["Time in seconds to reset the character"] = "重置角色的时间（秒）",
    ["Auto Reset"] = "自动重置",
    ["Automatically resets the character in selected time"] = "在选定时间自动重置角色",

    -- 配置管理
    ["Configuration"] = "配置管理",
    ["Config name"] = "配置名称",
    ["Config list"] = "配置列表",
    ["Create config"] = "创建配置",
    ["Load config"] = "加载配置",
    ["Overwrite config"] = "覆盖配置",
    ["Refresh list"] = "刷新列表",
    ["Set as autoload"] = "设为自动加载",
    ["Current autoload config none"] = "当前自动加载配置：无",

    -- 界面设置
    ["Interface"] = "界面",
    ["Theme"] = "主题",
    ["Changes the interface theme."] = "更改界面主题。",
    ["Dark"] = "暗色",
    ["Transparency"] = "透明度",
    ["Makes the interface transparent."] = "使界面透明。",
    ["Minimize Bind"] = "最小化快捷键",
    ["Data"] = "数据",
    ["TYPE"] = "类型",

    -- 传送功能
    ["Teleport Locations"] = "传送地点",
    ["Locations"] = "地点",
    ["Select Location"] = "选择地点",
    ["Teleports you to the selected location"] = "将你传送到选定地点",
    ["Teleports you to the selected location."] = "将你传送到选定地点。",
    ["NPCs"] = "NPC",
    ["Select NPC"] = "选择NPC",
    ["Teleports you to the selected NPC"] = "将你传送到选定NPC",

    -- 地点名称
    ["Main Village"] = "主村庄",
    ["Final Selection"] = "最终选拔",
    ["Little Village"] = "小村庄",
    ["Demon Slayer Corp"] = "鬼杀队总部",
    ["Danger Zone"] = "危险区域",
    ["Winter Village"] = "冬村庄",
    ["Mugen Train Raid"] = "无限列车篇",

    -- 控制台
    ["Roblox Console"] = "Roblox控制台",
    ["Console that get outputs from ROBLOX console and display it in this menu."] = "获取ROBLOX控制台输出并在此菜单中显示。",
    ["Delta Console"] = "Delta控制台",
    ["Console that provides output, input from Delta API."] = "提供Delta API输入输出的控制台。",
    ["CLEAR"] = "清空",

    -- About（关于）模块
    ["Info"] = "信息",
    ["This script is made by L4BIB. Join the Discord server for support and updates."] = "本脚本由L4BIB制作。加入Discord服务器获取支持与更新。",
    ["This script is made by L4BIB. Join the Discord server for support and updates"] = "本脚本由L4BIB制作。加入Discord服务器获取支持与更新",
    ["Version"] = "版本",
    ["Last Updated"] = "最后更新",
    ["Credits"] = "汉化来自TH 感谢使用！",
    ["Script Developer"] = "脚本开发者",
    ["Links"] = "链接",

    -- 特定首领/怪物名称 (鬼灭之刃角色)
    ["Kokushibo"] = "黑死牟",
    ["Hair Dream Manipulation User"] = "发梦操纵者",
    ["Weak Demon"] = "弱小鬼",
    ["Week Demon"] = "弱小鬼",
    ["Lower Moon Demon 6"] = "下弦之陆",
    ["Lower Moon Demon 5"] = "下弦之伍",
    ["Lower Moon Demon 4"] = "下弦之肆",
    ["Demon"] = "鬼",
    ["Speed Art User"] = "速之艺术使用者",
    ["Dream Manipulation User"] = "梦境操纵者",
    ["Half Dream Manipulation User"] = "半梦境操纵者",
    ["Mutated Demon"] = "变异鬼",
    ["Winter Demon"] = "冬鬼",
    ["Strong Demon"] = "强大鬼",
    ["Half Speed Art User"] = "半速艺术使用者",
    ["Missum"] = "蜜璃",
    ["Kanao"] = "香奈乎",
    ["Zenitsu"] = "善逸",
    ["Zentisu"] = "善逸",
    ["Cputaro"] = "碳太郎",
    ["Tanjiro (Water)"] = "炭治郎 (水)",
    ["Tanjiro (Sun)"] = "炭治郎 (日)",
    ["Obama"] = "奥巴马",
    ["Susamaru"] = "球鬼",
    ["Douma"] = "童磨",
    ["Yorilchi (Half Form)"] = "缘一 (半形态)",
    ["Yorichi (Half Form)"] = "缘一 (半形态)",
    ["Yoritchi (Half Form)"] = "缘一 (半形态)",
    ["Yonichi (Half Form)"] = "缘一 (半形态)",
    ["Tengen"] = "天元",
    ["Muzan"] = "无惨",
    ["Obanai Iguro"] = "伊黑小芭内",
    ["Rengoku"] = "炼狱",
    ["Nezuko"] = "祢豆子",
    ["Tokito"] = "时透",
    ["Akaza"] = "猗窝座",
    ["Kaigaku"] = "狯岳",
    ["Gyutaro"] = "妓夫太郎",
    ["Cyutaro"] = "妓夫太郎",
    ["Hantengu"] = "半天狗",
    ["Shinobu"] = "忍",
    ["Shinabu"] = "忍",
    ["Daki"] = "堕姬",
    ["Tomioka"] = "富冈",
    ["Tomicka"] = "富冈",
    ["Yahaba"] = "矢琶羽",
    ["Awakened Kaigaku"] = "觉醒狯岳",

    -- 任务相关
    ["Quest Boss Dummy 1"] = "任务首领假人1",
    ["Quest Boss Dummy 10"] = "任务首领假人10",
    ["Quest Boss Dummy 11"] = "任务首领假人11",
    ["Quest Boss Dummy 12"] = "任务首领假人12",
    ["Quest Boss Dummy 13"] = "任务首领假人13",
    ["Quest Boss Dummy 14"] = "任务首领假人14",
    ["Quest Boss Dummy 15"] = "任务首领假人15",
    ["Quest Boss Dummy 16"] = "任务首领假人16",
    ["Quest Boss Dummy 5"] = "任务首领假人5",
    ["Quest Boss Dummy 6"] = "任务首领假人6",
    ["Quest Boss Dummy 7"] = "任务首领假人7",
    ["Quest Boss Dummy 8"] = "任务首领假人8",
    ["Quest Boss Dummy 9"] = "任务首领假人9",
    ["Quest Dummy 1"] = "任务假人1",
    ["Quest Dummy 10"] = "任务假人10",
    ["Quest Dummy 11"] = "任务假人11",
    ["Quest Dummy 12"] = "任务假人12",
    ["Quest Dummy 2"] = "任务假人2",
    ["Quest Dummy 3"] = "任务假人3",
}

-- 优化后的调试系统
local debugMode = false -- 生产环境关闭调试
local debugCache = {}
local function debugLog(message)
    if debugMode then
        if not debugCache[message] then
            debugCache[message] = true
            print("[优化翻译] " .. message)
        end
    end
end

-- 优化的翻译缓存系统
local translationCache = {}
local processedElements = {} -- 防止重复处理

local function translateText(text)
    if not text or type(text) ~= "string" or text == "" then 
        return text 
    end
    
    -- 检查缓存
    if translationCache[text] then
        return translationCache[text]
    end
    
    -- 精确匹配（最快）
    if Translations[text] then
        translationCache[text] = Translations[text]
        debugLog("缓存精确: " .. text)
        return Translations[text]
    end
    
    -- 预处理文本用于匹配
    local cleanText = text:gsub("^%s*(.-)%s*$", "%1") -- 去除首尾空格
    
    -- 再次检查精确匹配
    if Translations[cleanText] then
        translationCache[text] = Translations[cleanText]
        translationCache[cleanText] = Translations[cleanText]
        debugLog("缓存清理后精确: " .. cleanText)
        return Translations[cleanText]
    end
    
    -- 有限的模糊匹配（只在必要时）
    local lowerText = cleanText:lower()
    for en, cn in pairs(Translations) do
        if lowerText == en:lower() then
            translationCache[text] = cn
            translationCache[cleanText] = cn
            debugLog("缓存模糊: " .. cleanText)
            return cn
        end
    end
    
    -- 未找到翻译，缓存原文本避免重复处理
    translationCache[text] = text
    return text
end

-- 优化的GUI处理系统
local function translateGuiElement(gui)
    -- 检查是否已处理
    if processedElements[gui] then return end
    
    -- 验证GUI类型
    if not (gui:IsA("TextLabel") or gui:IsA("TextButton") or gui:IsA("TextBox")) then 
        return 
    end
    
    -- 检查文本内容
    local text = gui.Text
    if not text or text == "" then 
        processedElements[gui] = true
        return 
    end
    
    -- 应用翻译
    local success, translated = pcall(function()
        return translateText(text)
    end)
    
    if success and translated and translated ~= text then
        gui.Text = translated
        debugLog("翻译元素: " .. gui:GetFullName())
    end
    
    -- 标记为已处理
    processedElements[gui] = true
end

-- 优化的扫描函数（使用防抖）
local scanQueue = {}
local scanDebounce = false

local function processScanQueue()
    if scanDebounce then return end
    scanDebounce = true
    
    task.spawn(function()
        while #scanQueue > 0 do
            local gui = table.remove(scanQueue, 1)
            pcall(translateGuiElement, gui)
            task.wait(0.01) -- 每10ms处理一个元素，减轻压力
        end
        scanDebounce = false
    end)
end

local function optimizedScanGui(parent)
    -- 限制扫描深度和频率
    local maxDepth = 3
    local scanned = 0
    
    local function scanRecursive(current, depth)
        if depth > maxDepth or scanned > 500 then return end
        
        for _, child in ipairs(current:GetChildren()) do
            if scanned < 500 then -- 限制单次扫描数量
                if child:IsA("TextLabel") or child:IsA("TextButton") or child:IsA("TextBox") then
                    table.insert(scanQueue, child)
                    scanned = scanned + 1
                end
                scanRecursive(child, depth + 1)
            else
                break
            end
        end
    end
    
    scanRecursive(parent, 1)
    processScanQueue()
end

-- 优化的监听器设置
local function setupOptimizedListeners()
    local guisToMonitor = {}
    
    -- 只监控必要的GUI
    local function addGuiToMonitor(gui)
        if not table.find(guisToMonitor, gui) then
            table.insert(guisToMonitor, gui)
            
            -- 初始扫描（延迟执行）
            task.delay(1, function()
                pcall(optimizedScanGui, gui)
            end)
            
            -- 新元素监听（使用防抖）
            local addDebounce = false
            gui.DescendantAdded:Connect(function(descendant)
                if addDebounce then return end
                addDebounce = true
                
                task.delay(0.5, function() -- 延迟处理新元素
                    pcall(function()
                        if descendant:IsA("TextLabel") or descendant:IsA("TextButton") or descendant:IsA("TextBox") then
                            table.insert(scanQueue, descendant)
                            processScanQueue()
                        end
                    end)
                    addDebounce = false
                end)
            end)
        end
    end

    -- 监控核心GUI
    local coreGui = game:GetService("CoreGui")
    addGuiToMonitor(coreGui)
    
    -- 监控玩家GUI（延迟加载）
    local players = game:GetService("Players")
    local player = players.LocalPlayer
    if player then
        player:GetPropertyChangedSignal("PlayerGui"):Connect(function()
            if player.PlayerGui then
                addGuiToMonitor(player.PlayerGui)
            end
        end)
        
        if player.PlayerGui then
            addGuiToMonitor(player.PlayerGui)
        end
    end
    
    -- 新玩家加入监控
    players.PlayerAdded:Connect(function(newPlayer)
        if newPlayer == players.LocalPlayer then
            newPlayer:GetPropertyChangedSignal("PlayerGui"):Connect(function()
                if newPlayer.PlayerGui then
                    addGuiToMonitor(newPlayer.PlayerGui)
                end
            end)
        end
    end)
end

-- 移除元表劫持（性能杀手）
-- 使用更轻量级的方法替代

-- 性能监控
local performanceStats = {
    translations = 0,
    scans = 0,
    lastUpdate = tick()
}

local function updateStats()
    performanceStats.translations = performanceStats.translations + 1
    local now = tick()
    if now - performanceStats.lastUpdate > 10 then -- 每10秒重置
        if debugMode then
            print(string.format("[性能统计] 10秒内翻译: %d 次", performanceStats.translations))
        end
        performanceStats.translations = 0
        performanceStats.lastUpdate = now
    end
end

-- 优化的翻译函数（带性能监控）
local function optimizedTranslate(text)
    local result = translateText(text)
    updateStats()
    return result
end

-- 启动优化后的系统
task.wait(3) -- 等待游戏完全加载

debugLog("启动优化版翻译引擎")
setupOptimizedListeners()

-- 可选：轻量级定期清理（防止内存泄漏）
task.spawn(function()
    while true do
        task.wait(30) -- 30秒清理一次
        -- 清理过期的缓存引用
        local count = 0
        for element, _ in pairs(processedElements) do
            if not element or not element.Parent then
                processedElements[element] = nil
                count = count + 1
            end
        end
        if debugMode and count > 0 then
            print("[内存清理] 清理了 " .. count .. " 个无效元素引用")
        end
    end
end)

-- 外部脚本加载优化
local externalScriptLoaded = false
task.delay(5, function() -- 延迟加载外部脚本
    if not externalScriptLoaded then
        local success, err = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/L4BIBKAZI/L4BIB-HUB/refs/heads/main/Weak%20Legacy%202"))()
            externalScriptLoaded = true
        end)
        if not success then
            warn("外部脚本加载失败:", err)
        end
    end
end)

-- 导出优化后的翻译函数（供其他模块使用）
return {
    Translate = optimizedTranslate,
    ClearCache = function()
        table.clear(translationCache)
        table.clear(processedElements)
        table.clear(debugCache)
    end
}
