local Translations = {
    ["CUT TReeS"] = "砍伐树木",
    ["Set Aura"] = "设置光环",
    ["Tree Aura"] = "树光环",
    ["Chests X-RAY"] = "箱子x光透视",
    ["Collect Chests"] = "收集宝箱",
    ["Select Chests"] = "选择宝箱",
    ["Auto Chests"] = "自动箱子",
    ["Walk Speed"] = "行走速度",
    ["YouTube: Tora IsMe"] = "原作Tora 汉化码头"
}

-- 添加调试功能
local debugMode = true
local function debugLog(message)
    if debugMode then
        print("[翻译调试] " .. message)
    end
end

local function translateText(text)
    if not text or type(text) ~= "string" then return text end
    
    -- 精确匹配
    if Translations[text] then
        debugLog("精确匹配: '" .. text .. "' -> '" .. Translations[text] .. "'")
        return Translations[text]
    end
    
    -- 模糊匹配（忽略大小写和空格）
    local lowerText = text:lower():gsub("%s+", "")
    for en, cn in pairs(Translations) do
        local lowerEn = en:lower():gsub("%s+", "")
        if lowerText == lowerEn then
            debugLog("模糊匹配: '" .. text .. "' -> '" .. cn .. "'")
            return cn
        end
    end
    
    -- 部分匹配
    for en, cn in pairs(Translations) do
        if text:find(en, 1, true) then -- 使用简单查找而非模式匹配
            debugLog("部分匹配: '" .. text .. "' -> '" .. cn .. "'")
            return text:gsub(en, cn)
        end
    end
    
    debugLog("未匹配: '" .. text .. "'")
    return text
end

local function setupTranslationEngine()
    local function translateGuiElement(gui)
        if not gui:IsA("TextLabel") and not gui:IsA("TextButton") and not gui:IsA("TextBox") then return end
        
        local text = gui.Text
        if text and text ~= "" then
            local translated = translateText(text)
            if translated ~= text then
                gui.Text = translated
                debugLog("已翻译: " .. gui:GetFullName())
            end
        end
    end

    local function scanGui(parent)
        debugLog("扫描: " .. parent:GetFullName())
        for _, gui in ipairs(parent:GetDescendants()) do
            pcall(translateGuiElement, gui)
        end
    end

    local function setupDescendantListener(parent)
        parent.DescendantAdded:Connect(function(descendant)
            task.wait(0.1) -- 给元素一些时间初始化
            pcall(translateGuiElement, descendant)
        end)
    end

    -- 尝试元表劫持
    local success, err = pcall(function()
        local mt = getrawmetatable(game)
        setreadonly(mt, false)
        
        local oldIndex = mt.__newindex
        mt.__newindex = newcclosure(function(t, k, v)
            if (t:IsA("TextLabel") or t:IsA("TextButton") or t:IsA("TextBox")) and k == "Text" then
                v = translateText(tostring(v))
            end
            return oldIndex(t, k, v)
        end)
        
        setreadonly(mt, true)
        debugLog("元表劫持成功")
    end)

    if not success then
        debugLog("元表劫持失败: " .. tostring(err))
        debugLog("使用备用方案")
        
        local guisToScan = {game:GetService("CoreGui")}
        local player = game:GetService("Players").LocalPlayer
        if player and player:FindFirstChild("PlayerGui") then
            table.insert(guisToScan, player.PlayerGui)
        end

        -- 初始扫描
        for _, gui in ipairs(guisToScan) do
            pcall(setupDescendantListener, gui)
            pcall(scanGui, gui)
        end

        -- 定期扫描
        while true do
            for _, gui in ipairs(guisToScan) do
                pcall(scanGui, gui)
            end
            task.wait(3)
        end
    end
end

-- 等待游戏加载完成
task.wait(5)
debugLog("启动翻译引擎")
setupTranslationEngine()

-- 外部脚本加载（如果有需要）
local success, err = pcall(function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/gumanba/Scripts/main/CutTrees"))()
end)

if not success then
    warn("外部脚本加载失败:", err)
end
