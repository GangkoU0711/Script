local Translations = {
    -- 主导航栏和主菜单
    ["BronxWare 99 Nights"] = "布朗克斯软件 99夜",
    ["Main"] = "主界面",
    ["Auto"] = "自动",
    ["Teleport Options"] = "传送选项",
    ["Bring Items"] = "获取物品",
    
    -- 玩家选项
    ["Player Options"] = "玩家选项",
    ["Codmode"] = "上帝模式",
    ["Spectate Players"] = "观察玩家",
    ["Fly (with Noclip)"] = "飞行（附带穿墙）",
    ["Fly Speed"] = "飞行速度",
    ["80 studs/sec"] = "80 罗布/秒",
    ["Walkspeed"] = "行走速度",
    ["16 Speed"] = "16 速度",
    ["呼出/隐藏鼠标"] = "呼出/隐藏鼠标",
    ["Instant Prompts"] = "即时提示",
    
    -- 自动化功能
    ["Auto Scrap Items"] = "自动拆解物品",
    ["Auto Fuel Fire"] = "自动添加燃料",
    ["Auto Crock Pot Main"] = "自动炖锅",
    ["Auto Cook"] = "自动烹饪",
    ["Auto Consume Food"] = "自动食用食物",
    ["Auto Chop Trees"] = "自动砍树",
    ["Auto Chop"] = "自动砍伐",
    ["Chop Range"] = "砍伐范围",
    ["100 studs"] = "100 罗布",
    ["Auto Plant Trees"] = "自动种植树木",
    ["Use auto chop then click auto plant trees and wait for it to load then it will auto plant"] = "使用自动砍伐后点击自动种树，等待加载完成即可自动种植",
    ["Auto Plant Saplings in Circle"] = "圆形自动种植树苗",
    ["Planting Radius"] = "种植半径",
    ["Tree Spacing"] = "树木间距",
    ["3.5 studs"] = "3.5 罗布",
    
    -- 箱子系统
    ["Chest Selector"] = "箱子选择器",
    ["None"] = "无",
    ["Volcanic Chest1"] = "火山箱子1",
    ["Refresh Chest List"] = "刷新箱子列表",
    ["Teleport To Chest"] = "传送到箱子",
    ["Player Teleport"] = "玩家传送",
    ["Select Player"] = "选择玩家",
    ["Refresh Player List"] = "刷新玩家列表",
    
    -- 传送功能
    ["Selective Player"] = "选择玩家",
    ["Anvil Teleports"] = "铁砧传送",
    ["Teleport Location"] = "传送位置",
    ["Anvil Front"] = "铁砧前方",
    ["Teleport"] = "传送",
    ["Kids Teleport"] = "孩子传送",
    ["Teleport to Dino Kid"] = "传送到恐龙孩子",
    ["Teleport to Kraken Kid"] = "传送到海怪孩子",
    ["Teleport to Squid Kid"] = "传送到乌贼孩子",
    ["Teleport to Koala Kid"] = "传送到考拉孩子",
    
    -- 物品分类
    ["Item Category"] = "物品分类",
    ["Fuel"] = "燃料",
    ["Pelt"] = "毛皮",
    ["Seeds"] = "种子",
    ["Armour"] = "盔甲",
    ["Select Item"] = "选择物品",
    ["停止/隐藏图标"] = "停止/隐藏图标",
    ["Chair"] = "椅子",
    ["Biofuel"] = "生物燃料",
    ["Coal"] = "煤炭",
    ["Food"] = "食物",
    ["Ammo"] = "弹药",
    ["Scrap"] = "废料",
    ["Fuel Canister"] = "燃料罐",
    ["Oil Barrel"] = "油桶",
    ["Log"] = "原木",
    ["Sacks"] = "袋子",
    ["Healing"] = "治疗",
    ["Wolf Corpse"] = "狼尸体",
    ["Alpha Wolf Corpse"] = "头狼尸体",
    ["Bear Corpse"] = "熊尸体",
    ["Sapling"] = "树苗",
    ["Bring Selected Item"] = "获取选定物品",
    
    -- 钓鱼选项
    ["Fishing Options"] = "钓鱼选项",
    ["Instant Catch"] = "即时捕获",
    ["Fishable Area ESP"] = "可钓鱼区域ESP",
    ["Fishing Zone"] = "钓鱼区域",
    ["Water (Zone #1)"] = "水域（区域 #1）",
    ["Water (Zone #2)"] = "水域（区域 #2）",
    ["Water (Zone #3)"] = "水域（区域 #3）",
    ["Teleport to Zone"] = "传送到区域",
    ["Refresh Zones"] = "刷新区域",
    ["Teleport to Fishing Hut"] = "传送到钓鱼小屋",
}

-- 开启调试模式来排查问题
local debugMode = true
local function debugLog(message)
    if debugMode then
        print("[翻译调试] " .. tostring(message))
    end
end

-- 简化的翻译缓存
local translationCache = {}

local function translateText(text)
    if not text or type(text) ~= "string" or text == "" then 
        return text 
    end
    
    -- 检查缓存
    if translationCache[text] then
        return translationCache[text]
    end
    
    -- 精确匹配
    if Translations[text] then
        translationCache[text] = Translations[text]
        debugLog("翻译: '" .. text .. "' -> '" .. Translations[text] .. "'")
        return Translations[text]
    end
    
    -- 返回原文本
    translationCache[text] = text
    return text
end

-- 简化的GUI处理
local processedElements = {}

local function safeTranslateGuiElement(gui)
    -- 安全检查
    if not gui or not gui.Parent then 
        debugLog("元素无效或没有父级: " .. tostring(gui and gui.Name))
        return 
    end
    
    if processedElements[gui] then 
        return 
    end
    
    -- 类型检查
    local success, isTextElement = pcall(function()
        return gui:IsA("TextLabel") or gui:IsA("TextButton") or gui:IsA("TextBox")
    end)
    
    if not success then
        debugLog("类型检查失败: " .. tostring(gui.Name))
        return 
    end
    
    if not isTextElement then 
        return 
    end
    
    -- 文本检查
    local text = gui.Text
    if not text or text == "" then 
        processedElements[gui] = true
        return 
    end
    
    -- 应用翻译
    local translated = translateText(text)
    if translated ~= text then
        local success, err = pcall(function()
            gui.Text = translated
            debugLog("成功翻译元素: " .. gui.Name .. " | 路径: " .. tostring(gui:GetFullName()))
        end)
        
        if not success then
            debugLog("翻译失败: " .. tostring(err))
        end
    end
    
    processedElements[gui] = true
end

-- 简化的扫描系统
local function simpleScan(parent)
    debugLog("开始扫描: " .. parent.Name .. " | 子元素数量: " .. #parent:GetChildren())
    
    local function scanChildren(container)
        for _, child in ipairs(container:GetChildren()) do
            -- 安全地处理每个元素
            pcall(safeTranslateGuiElement, child)
            -- 递归扫描子元素
            if #child:GetChildren() > 0 then
                scanChildren(child)
            end
        end
    end
    
    local success, err = pcall(scanChildren, parent)
    if not success then
        debugLog("扫描失败: " .. tostring(err))
    else
        debugLog("扫描完成: " .. parent.Name)
    end
end

-- 简化的监听器
local function setupSimpleListener(parent)
    parent.DescendantAdded:Connect(function(descendant)
        task.wait(0.5) -- 给元素更多时间初始化
        pcall(safeTranslateGuiElement, descendant)
    end)
end

-- 主要启动函数
local function initializeTranslation()
    debugLog("初始化翻译系统...")
    
    -- 等待游戏加载
    local players = game:GetService("Players")
    local player = players.LocalPlayer

    if not player then
        debugLog("等待玩家加入...")
        players.PlayerAdded:Wait()
        player = players.LocalPlayer
    end

    debugLog("玩家: " .. player.Name)
    
    -- 等待PlayerGui
    local playerGui = player:FindFirstChild("PlayerGui")
    if not playerGui then
        debugLog("等待PlayerGui...")
        playerGui = player:WaitForChild("PlayerGui", 10)
    end
    
    if playerGui then
        debugLog("找到PlayerGui")
    else
        debugLog("未找到PlayerGui")
    end
    
    -- 设置监听器
    local coreGui = game:GetService("CoreGui")
    debugLog("设置CoreGui监听器...")
    setupSimpleListener(coreGui)
    simpleScan(coreGui)
    
    if playerGui then
        debugLog("设置PlayerGui监听器...")
        setupSimpleListener(playerGui)
        simpleScan(playerGui)
        
        -- 监听PlayerGui的变化
        playerGui.ChildAdded:Connect(function(child)
            debugLog("PlayerGui添加了新子元素: " .. child.Name)
            task.wait(1) -- 等待GUI完全加载
            simpleScan(child)
        end)
    end
    
    -- 额外扫描：尝试找到常见的GUI容器
    local commonContainers = {
        "ScreenGui", "SurfaceGui", "BillboardGui", "Dialog", "Frame"
    }
    
    for _, containerName in ipairs(commonContainers) do
        for _, obj in ipairs(workspace:GetDescendants()) do
            if obj:IsA(containerName) then
                debugLog("扫描workspace中的GUI: " .. obj:GetFullName())
                simpleScan(obj)
            end
        end
    end
    
    debugLog("翻译系统初始化完成")
end

-- 修改后的外部脚本加载函数
local function loadExternalScript()
    debugLog("正在加载外部脚本...")
    
    local success, err = pcall(function()
        -- 尝试加载外部脚本
        local scriptUrl = "https://raw.githubusercontent.com/Seriously56/99-Nights/refs/heads/main/99%20nights"
        local scriptContent = game:HttpGet(scriptUrl, true)
        loadstring(scriptContent)()
    end)
    
    if success then
        debugLog("外部脚本加载成功")
        -- 等待更长时间让脚本创建界面
        for i = 1, 10 do
            debugLog("等待界面创建... (" .. i .. "/10)")
            task.wait(1)
            
            -- 每次等待后都尝试扫描
            local coreGui = game:GetService("CoreGui")
            simpleScan(coreGui)
            
            local player = game:GetService("Players").LocalPlayer
            local playerGui = player and player:FindFirstChild("PlayerGui")
            if playerGui then
                simpleScan(playerGui)
            end
        end
    else
        debugLog("外部脚本加载失败: " .. tostring(err))
        -- 即使外部脚本失败，也初始化翻译
        task.wait(2)
        initializeTranslation()
    end
end

-- 改进的主启动流程
task.spawn(function()
    debugLog("=== 启动翻译脚本 ===")
    
    -- 先等待游戏基本加载
    task.wait(3)
    
    -- 先初始化基础翻译系统
    initializeTranslation()
    
    -- 然后加载外部脚本
    task.wait(2)
    loadExternalScript()
    
    -- 最后再次确保翻译系统运行
    task.wait(5)
    debugLog("=== 最终翻译检查 ===")
    initializeTranslation()
end)

-- 提供手动刷新功能
local function manualRefresh()
    table.clear(translationCache)
    table.clear(processedElements)
    debugLog("手动刷新: 缓存已清除")
    initializeTranslation()
end

-- 创建简单的UI来手动刷新翻译
task.spawn(function()
    task.wait(5) -- 等待游戏加载
    
    local players = game:GetService("Players")
    local player = players.LocalPlayer
    if not player then return end
    
    local playerGui = player:WaitForChild("PlayerGui", 10)
    if not playerGui then return end
    
    -- 创建刷新按钮
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "TranslationRefreshUI"
    screenGui.Parent = playerGui
    
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 120, 0, 40)
    button.Position = UDim2.new(0, 10, 0, 10)
    button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Text = "刷新翻译"
    button.Parent = screenGui
    
    button.MouseButton1Click:Connect(function()
        manualRefresh()
    end)
end)

-- 定期清理内存
task.spawn(function()
    while true do
        task.wait(30)
        local count = 0
        for element, _ in pairs(processedElements) do
            if not element or not element.Parent then
                processedElements[element] = nil
                count = count + 1
            end
        end
        if debugMode and count > 0 then
            debugLog("清理了 " .. count .. " 个无效元素")
        end
    end
end)

-- 提供简单的翻译接口
return {
    Translate = translateText,
    Refresh = manualRefresh
}
