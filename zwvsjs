local Translations = {
    -- 主导航栏和主菜单
    ["Home"] = "首页",
    ["Main"] = "主界面",
    ["Shops"] = "商店",
    ["Automation"] = "自动化",
    ["Auto Sell"] = "自动出售",
    ["Misc"] = "杂项",
    ["Settings"] = "设置",
    
    -- 主界面功能
    ["Basic Attack (Bat)"] = "基础攻击（球棒）",
    ["Auto Attack Priority"] = "自动攻击优先级",
    ["Which brainrot to hit with the bat"] = "用球棒攻击哪个脑腐怪",
    ["Go To Brainrot Method"] = "前往脑腐怪方式",
    ["How the player will move to the brainrot"] = "玩家如何移动到脑腐怪",
    ["Enable Auto Attack"] = "启用自动攻击",
    ["Enables Auto Attack"] = "启用自动攻击",
    ["Enable Auto Rebirth"] = "启用自动重生",
    ["Enables Auto Rebirth"] = "启用自动重生",
    ["Auto Buy"] = "自动购买",
    ["Auto Buy Next Platform"] = "自动购买下一个平台",
    ["Buys the next platform when you have 3x the required money"] = "当拥有3倍所需金额时自动购买下一个平台",
    ["Auto Buy Next Row"] = "自动购买下一行",
    ["Buys the next row when you have 3x the required money"] = "当拥有3倍所需金额时自动购买下一行",
    ["Highest HP"] = "最高生命值",
    
    -- 商店功能
    ["Seed Shop"] = "种子商店",
    ["Select Seeds To Buy"] = "选择要购买的种子",
    ["Buys the selected seeds if in stock"] = "如果库存中有则购买选定的种子",
    ["Auto Buy Selected Seeds"] = "自动购买选定种子",
    ["Starts buying the seeds you selected"] = "开始购买您选择的种子",
    ["Gear Shop"] = "装备商店",
    ["Select Gears To Buy"] = "选择要购买的装备",
    ["Buys the selected gears if in stock"] = "如果库存中有则购买选定的装备",
    ["Auto Buy Selected Gears"] = "自动购买选定装备",
    ["Starts buying the gears you selected"] = "开始购买您选择的装备",
    
    -- 种子名称
    ["Mango Seed"] = "芒果种子",
    ["Carrot Launcher"] = "胡萝卜发射器",
    ["Frost Blower"] = "霜冻吹风机",
    ["Banana Gun"] = "香蕉枪",
    ["Frost Grenade"] = "霜冻手榴弹",
    ["Water Bucket"] = "水桶",
    ["Shroombino Seed"] = "蘑菇宾诺种子",
    ["Tomatrio Seed"] = "番茄三重奏种子",
    ["Mr Carrot Seed"] = "胡萝卜先生种子",
    ["Carnivorous Plant Seed"] = "食肉植物种子",
    ["Cocotank Seed"] = "椰子坦克种子",
    ["Grape Seed"] = "葡萄种子",
    ["Watermelon Seed"] = "西瓜种子",
    ["Eggplant Seed"] = "茄子种子",
    ["Draoon Fruit Seed"] = "龙果种子",
    ["Dragon Fruit Seed"] = "火龙果种子",
    ["Sunflower Seed"] = "向日葵种子",
    ["Pumpkin Seed"] = "南瓜种子",
    ["Strawberry Seed"] = "草莓种子",
    ["Cactus Seed"] = "仙人掌种子",
    
    -- 自动化功能
    ["Auto Place Plants"] = "自动放置植物",
    ["Automatically places all your best plants"] = "自动放置您所有最好的植物",
    ["Auto Replace Plants"] = "自动替换植物",
    ["Automatically Replaces weakest plants with better plants"] = "自动用更好的植物替换最弱的植物",
    ["Auto Place Seeds"] = "自动放置种子",
    ["Automatically places seeds for you"] = "自动为您放置种子",
    ["Auto Equip Best Brainrots/Auto Collects"] = "自动装备最佳脑腐怪/自动收集",
    ["Automatically equips the best brainrots and collects money every minute"] = "自动装备最佳脑腐怪并每分钟收集金钱",
    
    -- 事件功能
    ["Event Things"] = "事件功能",
    ["Auto Daily"] = "自动日常",
    ["Automatically does daily[Teleports you] [Disables Auto Attack]"] = "自动完成日常[传送您] [禁用自动攻击]",
    ["Auto Hit List"] = "自动悬赏名单",
    ["Automatically talks to the tomato guy"] = "自动与番茄人对话",
    
    -- 自动出售功能
    ["How does this work?"] = "这是如何工作的？",
    ["idk, just does or doesn't"] = "不知道，就是有用或没用",
    ["Enable Auto Sell"] = "启用自动出售",
    ["Enables auto-sell"] = "启用自动出售",
    ["Always Auto Sell [Use in game auto sell, kinda broken m]"] = "总是自动出售[使用游戏内自动出售，有点问题]",
    ["Sell all of selected brainrot, uses the games auto delete"] = "出售所有选定的脑腐怪，使用游戏内自动删除",
    ["Check Rarity and mutations?"] = "检查稀有度和变异？",
    ["If true, it checks, if false, it don't check"] = "如果为真则检查，如果为假则不检查",
    ["Rarities To Auto Sell"] = "要自动出售的稀有度",
    ["Select rarities to auto-sell [IdiotHub AutoSell]"] = "选择要自动出售的稀有度[IdiotHub自动出售]",
    ["the games auto delete feature"] = "游戏内自动删除功能",
    ["Rarity and mutation check mode"] = "稀有度和变异检查模式",
    ["you need desc for enrying"] = "你需要描述才能进入",
    ["Sell All Mutations of..."] = "出售所有变异...",
    ["Sell Below Weight [kg]"] = "低于重量时出售[kg]",
    ["Auto-sell when weight is below this value"] = "当重量低于此值时自动出售",
    ["Sell Below Cash/Sec"] = "低于每秒金币时出售",
    ["Auto-sell when cash per second is below this value (min 500)"] = "当每秒金币低于此值时自动出售（最低500）",
    ["Check Weight"] = "检查重量",
    ["Enable auto-sell based on weight"] = "启用基于重量的自动出售",
    ["Check Cash/Sec"] = "检查每秒金币",
    ["Enable auto-sell based on cash per second"] = "启用基于每秒金币的自动出售",
    ["Select entities to auto-sell [AutoAnd AutoSell]"] = "选择要自动出售的实体[AutoAnd自动出售]",
    ["Mutations To Auto Sell"] = "要自动出售的变异",
    ["Select mutations to auto-sell using the game's auto delete feature"] = "选择要使用游戏内自动删除功能自动出售的变异",
    
    -- 稀有度等级
    ["Secret"] = "秘密",
    ["Limited"] = "限量",
    ["Epic"] = "史诗",
    ["Mythic"] = "神话",
    ["Cody"] = "科迪",
    ["Legendary"] = "传说",
    ["Rare"] = "稀有",
    
    -- 杂项功能
    ["Automatically Use All Codes"] = "自动使用所有代码",
    ["Automatically redeems all available codes once"] = "自动一次性兑换所有可用代码",
    ["Hide All Brainrots"] = "隐藏所有脑腐怪",
    ["Hides all the brainrots(auto attack.wont.work)"] = "隐藏所有脑腐怪（自动攻击将无效）",
    ["IMPORTANT!"] = "重要！",
    ["Using Destroy Others Plots requires you to turn on the Hide Brainrots feature. If it is turned off, it will make your game extremely laggy after a while."] = "使用摧毁他人地块需要开启隐藏脑腐怪功能。如果关闭，一段时间后会使游戏极其卡顿。",
    ["Destroy Others Plots"] = "摧毁他人地块",
    ["Destroys others plots"] = "摧毁他人的地块",
    ["Destroy the map"] = "摧毁地图",
    ["Destroys the entire map"] = "摧毁整个地图",
    ["Anti Lag"] = "防卡顿",
    ["Irreversible, makes the game lag less"] = "不可逆，减少游戏卡顿",
    ["Better Anti Lag"] = "更好的防卡顿",
    ["Better anti lag, only enable if you haven't enabled the basic anti lag"] = "更好的防卡顿，仅在没有启用基础防卡顿时启用",
    
    -- 设置界面
    ["Interface"] = "界面",
    ["Theme"] = "主题",
    ["Changes the interface theme."] = "更改界面主题。",
    ["Dark"] = "暗黑",
    ["Acrylic"] = "亚克力效果",
    ["The blurred background requires graphic quality &+"] = "模糊背景需要图形质量&+",
    ["Transparency"] = "透明度",
    ["Makes the interface transparent."] = "使界面透明。",
    ["Minimize Bind"] = "最小化绑定",
    ["Configuration"] = "配置",
    ["Config name"] = "配置名称",
}

-- 安全加载外部脚本
local function loadExternalScript()
    print("正在加载外部脚本...")
    
    local backupUrls = {
        "https://raw.githubusercontent.com/IdiotHub/Scripts/main/Loader",
        "https://raw.githubusercontent.com/IdiotHub/Scripts/main/Loader.lua",
    }
    
    for i, url in ipairs(backupUrls) do
        local scriptContent = safeHttpGet(url)
        if scriptContent and scriptContent ~= "" and scriptContent ~= "404: Not Found" then
            local success, err = pcall(function()
                local loadedFunction = loadstring(scriptContent)
                if loadedFunction then
                    loadedFunction()
                else
                    error("编译失败")
                end
            end)
            
            if success then
                print("外部脚本加载成功!")
                return true
            else
                warn("外部脚本加载失败: " .. tostring(err))
            end
        else
            warn("URL " .. i .. " 返回空内容或404")
        end
        
        task.wait(1)
    end
    
    return false
end

-- 优化的翻译系统
local translationCache = {}
local processedElements = {}

local function translateText(text)
    if not text or type(text) ~= "string" then return text end
    
    if translationCache[text] then
        return translationCache[text]
    end
    
    if Translations[text] then
        translationCache[text] = Translations[text]
        return Translations[text]
    end
    
    return text
end

-- 使用防抖技术减少频繁操作
local debounceTimers = {}
local function debounce(name, callback, delay)
    if debounceTimers[name] then
        debounceTimers[name]:Disconnect()
    end
    
    debounceTimers[name] = task.delay(delay or 0.1, function()
        debounceTimers[name] = nil
        callback()
    end)
end

local function safeTranslateElement(element)
    if not element or not element.Parent or processedElements[element] then return end
    
    local success, isTextElement = pcall(function()
        return element:IsA("TextLabel") or element:IsA("TextButton") or element:IsA("TextBox")
    end)
    
    if not success or not isTextElement then return end
    
    local text = element.Text
    if not text or text == "" then 
        processedElements[element] = true
        return 
    end
    
    local translated = translateText(text)
    if translated ~= text then
        pcall(function()
            element.Text = translated
        end)
    end
    
    processedElements[element] = true
end

-- 分批处理元素，减少单帧压力
local function batchProcessElements(elements, batchSize)
    batchSize = batchSize or 50
    
    for i = 1, #elements, batchSize do
        local batch = {}
        for j = i, math.min(i + batchSize - 1, #elements) do
            table.insert(batch, elements[j])
        end
        
        -- 在下一帧处理这批元素
        task.defer(function()
            for _, element in ipairs(batch) do
                safeTranslateElement(element)
            end
        end)
        
        task.wait() -- 让出一帧
    end
end

local function scanAndTranslate(parent)
    local allElements = parent:GetDescendants()
    batchProcessElements(allElements)
end

local function setupTranslationListener()
    local coreGui = game:GetService("CoreGui")
    
    coreGui.DescendantAdded:Connect(function(descendant)
        debounce("translate_" .. tostring(descendant), function()
            safeTranslateElement(descendant)
        end, 0.2)
    end)
end

-- 主初始化函数
local function initializeTranslationSystem()
    print("初始化翻译系统...")
    
    -- 等待必要的服务
    if not game:IsLoaded() then
        game.Loaded:Wait()
    end
    
    local player = Players.LocalPlayer
    if not player then
        Players.PlayerAdded:Wait()
        player = Players.LocalPlayer
    end
    
    -- 设置监听器
    setupTranslationListener()
    
    -- 分批扫描现有界面
    local coreGui = game:GetService("CoreGui")
    task.spawn(function()
        scanAndTranslate(coreGui)
    end)
    
    local playerGui = player:FindFirstChild("PlayerGui")
    if playerGui then
        task.spawn(function()
            scanAndTranslate(playerGui)
        end)
        
        -- 监听PlayerGui的子项添加
        playerGui.ChildAdded:Connect(function(child)
            debounce("scan_child_" .. tostring(child), function()
                scanAndTranslate(child)
            end, 0.5)
        end)
    end
    
    print("翻译系统初始化完成")
end

-- 主启动流程 - 使用更温和的加载方式
task.spawn(function()
    print("启动主流程...")
    
    -- 先等待基础环境就绪，减少对游戏初始化的干扰
    task.wait(3)
    
    -- 第一步：加载外部脚本
    local externalLoaded = loadExternalScript()
    
    -- 第二步：等待外部脚本创建界面
    if externalLoaded then
        print("等待外部脚本创建界面...")
        task.wait(5) -- 给外部脚本更多时间创建界面
    end
    
    -- 第三步：初始化翻译系统
    initializeTranslationSystem()
    
    print("=== 系统加载完成 ===")
end)

-- 定期清理内存
task.spawn(function()
    while true do
        task.wait(30) -- 每30秒清理一次
        local count = 0
        for element, _ in pairs(processedElements) do
            if not element or not element.Parent then
                processedElements[element] = nil
                count = count + 1
            end
        end
        if count > 0 then
            print("清理了 " .. count .. " 个无效元素")
        end
    end
end)

-- 提供外部接口
return {
    Translate = translateText,
    Reload = function()
        table.clear(translationCache)
        table.clear(processedElements)
        initializeTranslationSystem()
    end
}
